on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

name: Main Workflow

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Get SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o quality-gate.json '${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{secrets.SONAR_PROJECT_KEY}}'
          echo "status=$(cat quality-gate.json)" >> $GITHUB_ENV

      - name: Get SonarQube Measures
        id: sonarqube_measures
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o sonarqube_measures.json '${{ secrets.SONAR_HOST_URL }}/api/measures/search?metricKeys=new_duplicated_lines_density,new_line_coverage,new_code_smells,new_bugs,new_vulnerabilities,new_security_hotspots_reviewed&projectKeys=${{secrets.SONAR_PROJECT_KEY}}'
          sonarqube_measures=$(cat sonarqube_measures.json)
          echo "sonarqube_measures=${sonarqube_measures}" >> $GITHUB_ENV

      - name: Comment PR with SonarQube Measures
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const data = ${{fromJson(env.sonarqube_measures)}};
            if (!data || !data.components) {
              console.log('No SonarQube measures found.');
              return;
            }

            let comment = 'SonarQube Analysis Metrics:\n\n';

            data.components.forEach(component => {
              comment += `- File: ${component.name}\n`;
              component.measures.forEach(measure => {
                let icon = '';
                switch (measure.metric) {
                  case 'new_duplicated_lines_density':
                    icon = '📊';
                    break;
                  case 'code_smells':
                    icon = '💡';
                    break;
                  case 'new_bugs':
                    icon = '🐞';
                    break;
                  case 'new_vulnerabilities':
                    icon = '🛡️';
                    break;
                  // Add more cases for other metrics if needed
                  default:
                    icon = '';
                }
                comment += `  ${icon} ${measure.metric}: ${measure.period.value}\n`;
              });
              comment += '\n';
            });

            console.log(comment);
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

      - name: Block PR on SonarQube Analysis Failure
        if: env.status && fromJson(env.status).projectStatus.status == 'ERROR'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "The SonarQube analysis failed. Blocking the PR..."
          pr_number="${{ github.event.pull_request.number }}"
          owner="${{ github.repository_owner }}"
          repo="${{ github.repository }}"
          response=$(curl -X POST -v \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$owner/$repo/issues/$pr_number/lock" 2>&1)
          echo "$response"
